#!/bin/bash

#store name of temp file in TMP var
TMP=temp$$

#remove temp file if error
trap "rm -f $TMP; exit 1" INT HUP TERM

#If the user does not specifiy rows or cols
#print an error message
if [ $# -eq 0 ] 
   then 
	echo "Must specify rows or cols" >&2
	exit 1
#if the user does not specify a file take input
#store in temp file
elif [ $# -eq 1 ]
   then
	if [[ "$1" == -r* ]] || [[ "$1" == -c* ]]
	   then 
		while read stdInp
		do 
	   	   echo $stdInp >> $TMP
		done
	else 
 	   echo "Invalid command" >&2
	   exit 1
	fi
#If the file cannot be read
#print error message
elif [ ! -r "$2" ]
   then
	echo "Error opening file" >&2
	exit 1
#If the file can be read transfer contents
#to a temp file
elif [ $# -eq 2 ]
   then
	cp $2 $TMP
	#while read line
	#do
	 #  echo $line >> $TMP
	#done < "$2"
#Else the user gave the wrong # of arguments
else 
   echo "Wrong number of arguments" >&2
   exit 1
fi

#if rows sepcified
if [[ "$1" == -r* ]]
   then
   rowCnt=0
   while read line
   do
	sum=0
	colCnt=0

	#get each # in the line into var x
	for x in $line
	do
	  #add x to sum
	  sum=`expr $sum + $x`
	
	  #add x to array
	  lineArr[$colCnt]=$x

	  #increase col cnt for each #(col)
	  colCnt=`expr $colCnt + 1`
	done 

	#calculate average of row
	avg=`expr $sum / $colCnt`

	#round average if needed
	mod=`expr $sum % $colCnt`
	if [ `expr 2 \* $mod` -ge $colCnt ]
	   then
		avg=`expr $avg + 1`
	fi
	
	#store avg in array
	avgArr[$rowCnt]=$avg

	#calculate median
	#sort row
	sorted=( $(
		for y in "${lineArr[@]}"
		do
		   echo "$y"
		done | sort -n) )

	#find middle
	middle=`expr $colCnt / 2`
	med=${sorted[$middle]}

	#store median in array
	medArr[$rowCnt]=$med

	#increase the row cnt for each line read
	rowCnt=`expr $rowCnt + 1`
   done < "$TMP"

   #print results
   echo "Average Median"
   for ((i=0;i<$rowCnt;i++))
	do
  	   echo "${avgArr[$i]}	${medArr[$i]}"
	done

#if cols specified
elif [[ "$1" == -c* ]]
   then
	rowCnt=0
	declare -A colArr
   	while read line
   	do
           colCnt=0

	   #increase the row cnt for each line read
	   rowCnt=`expr $rowCnt + 1`

	   #get each # in the line into var x
	   for x in $line
	   do
	     #add x to sum of col in array
	     sum=${colSum[$colCnt]}
	     sum=`expr $sum + $x`
	     colSum[$colCnt]=$sum
	
	     #Add x to colArr
	     colArr[$colCnt,$rowCnt]=$x
	     #increase col cnt for each #(col)
	     colCnt=`expr $colCnt + 1`
	   done

	done < "$TMP" 

	#calculate average of col
	colCnt=0
	for i in ${colSum[@]}
	do
	   avg=`expr $i / $rowCnt`

	   #round if needed
	   mod=`expr $i % $rowCnt`
	   if [ `expr 2 \* $mod` -ge $rowCnt ]
	       then
	       	   avg=`expr $avg + 1`
	   fi
	
	   #store avg in array
	   avgArr[$colCnt]=$avg
	  colCnt=`expr $colCnt + 1`
	done 

	#calculate median
	#sort col
	for ((i=0;i<colCnt;i++))
	do
	   for ((j=1;j<=rowCnt;j++))
	   do
		lineArr[$j]=${colArr[$i,$j]}
	   done
	
	#sort row
	sorted=( $(
		for y in "${lineArr[@]}"
		do
		   echo "$y"
		done | sort -n) )

	#find middle
	middle=`expr $rowCnt / 2`
	med=${sorted[$middle]}

	#store median in array
	medArr[$i]=$med 
	done

        #print results
   printf "Average: "
   for i in ${avgArr[@]}
	do
  	   printf "$i "
	done

   printf "\nMedian: "
   for i in ${medArr[@]}
	do
  	   printf "$i "
	done

	printf "\n"

#if invalid command specified print error
else 
   echo "Invalid command" >&2
   rm -f $TMP
   exit 1
fi

#if completed successfully, remove temp file and exit
rm $TMP
exit 0
